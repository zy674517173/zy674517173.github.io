{"name": "test_mp_article", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=129.0.6668.101)\nStacktrace:\n\tGetHandleVerifier [0x00007FF70FACB095+29557]\n\t(No symbol) [0x00007FF70FA3FA50]\n\t(No symbol) [0x00007FF70F8FB56A]\n\t(No symbol) [0x00007FF70F8CFCC5]\n\t(No symbol) [0x00007FF70F97EE07]\n\t(No symbol) [0x00007FF70F997E21]\n\t(No symbol) [0x00007FF70F976F33]\n\t(No symbol) [0x00007FF70F94116F]\n\t(No symbol) [0x00007FF70F9422D1]\n\tGetHandleVerifier [0x00007FF70FDFC96D+3378253]\n\tGetHandleVerifier [0x00007FF70FE48497+3688311]\n\tGetHandleVerifier [0x00007FF70FE3D1CB+3642539]\n\tGetHandleVerifier [0x00007FF70FB8A6B6+813462]\n\t(No symbol) [0x00007FF70FA4AB5F]\n\t(No symbol) [0x00007FF70FA46B74]\n\t(No symbol) [0x00007FF70FA46D10]\n\t(No symbol) [0x00007FF70FA35C1F]\n\tBaseThreadInitThunk [0x00007FFDBEFF257D+29]\n\tRtlUserThreadStart [0x00007FFDC02EAF08+40]", "trace": "self = <scripts.test02_mp_article.TestMpArticle object at 0x000001726CED3790>, title = 'test001-bj001', content = '今晚吃汤饭！'\n\n    def test_mp_article(self, title=\"test001-bj001\", content=\"今晚吃汤饭！\"):\n        # 调用发布文章业务方法\n>       self.article.page_mp_article(title, content)\n\nscripts\\test02_mp_article.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage\\page_mp_article.py:56: in page_mp_article\n    self.page_click_content_manage()\npage\\page_mp_article.py:11: in page_click_content_manage\n    self.base_click(page.mp_content_manager)\nbase\\base.py:69: in base_click\n    self.base_find(loc).click()\nbase\\base.py:30: in base_find\n    poll_frequency=poll).until(lambda d:d.find_element(*loc))\nE:\\Program Files\\anaconda3\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\nbase\\base.py:30: in <lambda>\n    poll_frequency=poll).until(lambda d:d.find_element(*loc))\nE:\\Program Files\\anaconda3\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nE:\\Program Files\\anaconda3\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001726CED3B20>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF70FA35C1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFDBEFF257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFDC02EAF08+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=129.0.6668.101)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF70FACB095+29557]\nE       \t(No symbol) [0x00007FF70FA3FA50]\nE       \t(No symbol) [0x00007FF70F8FB56A]\nE       \t(No symbol) [0x00007FF70F8CFCC5]\nE       \t(No symbol) [0x00007FF70F97EE07]\nE       \t(No symbol) [0x00007FF70F997E21]\nE       \t(No symbol) [0x00007FF70F976F33]\nE       \t(No symbol) [0x00007FF70F94116F]\nE       \t(No symbol) [0x00007FF70F9422D1]\nE       \tGetHandleVerifier [0x00007FF70FDFC96D+3378253]\nE       \tGetHandleVerifier [0x00007FF70FE48497+3688311]\nE       \tGetHandleVerifier [0x00007FF70FE3D1CB+3642539]\nE       \tGetHandleVerifier [0x00007FF70FB8A6B6+813462]\nE       \t(No symbol) [0x00007FF70FA4AB5F]\nE       \t(No symbol) [0x00007FF70FA46B74]\nE       \t(No symbol) [0x00007FF70FA46D10]\nE       \t(No symbol) [0x00007FF70FA35C1F]\nE       \tBaseThreadInitThunk [0x00007FFDBEFF257D+29]\nE       \tRtlUserThreadStart [0x00007FFDC02EAF08+40]\n\nE:\\Program Files\\anaconda3\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "a7a47477-bcf6-4284-95e0-def401cb7692-attachment.txt", "type": "text/plain"}], "start": 1729516742744, "stop": 1729516746841, "uuid": "a85d6645-d99c-4cd4-9f76-dcfd0a1758f6", "historyId": "64196c9c705403acf80282af53eedc5f", "testCaseId": "64196c9c705403acf80282af53eedc5f", "fullName": "scripts.test02_mp_article.TestMpArticle#test_mp_article", "labels": [{"name": "parentSuite", "value": "scripts"}, {"name": "suite", "value": "test02_mp_article"}, {"name": "subSuite", "value": "TestMpArticle"}, {"name": "host", "value": "DESKTOP-ZY"}, {"name": "thread", "value": "22968-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "scripts.test02_mp_article"}]}