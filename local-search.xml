<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>page_1</title>
    <link href="/2024/06/01/page_1/"/>
    <url>/2024/06/01/page_1/</url>
    
    <content type="html"><![CDATA[<h1 id="如何使用Vscode和github完成代码版本控制"><a href="#如何使用Vscode和github完成代码版本控制" class="headerlink" title="如何使用Vscode和github完成代码版本控制"></a>如何使用Vscode和github完成代码版本控制</h1><h2 id="Git使用"><a href="#Git使用" class="headerlink" title="Git使用"></a>Git使用</h2><p>参考内容：<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896827951938304">廖雪峰git教程</a></p><h3 id="1、创建本地版本库"><a href="#1、创建本地版本库" class="headerlink" title="1、创建本地版本库"></a>1、创建本地版本库</h3><h4 id="1）选择合适的地方，创建一个空目录，并进入目录"><a href="#1）选择合适的地方，创建一个空目录，并进入目录" class="headerlink" title="1）选择合适的地方，创建一个空目录，并进入目录"></a>1）选择合适的地方，创建一个空目录，并进入目录</h4><p>win系统下最好不包括中文目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> MyWebServer</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> MyWebServer</span><br></code></pre></td></tr></table></figure><h4 id="2）将目录变成git可以管理的仓库"><a href="#2）将目录变成git可以管理的仓库" class="headerlink" title="2）将目录变成git可以管理的仓库"></a>2）将目录变成git可以管理的仓库</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift">$ git <span class="hljs-keyword">init</span><br><span class="hljs-type">Initialized</span> empty <span class="hljs-type">Git</span> repository <span class="hljs-keyword">in</span> <span class="hljs-type">E</span>:<span class="hljs-regexp">/MyGit/</span><span class="hljs-type">MyWebServer</span><span class="hljs-regexp">/.git/</span><br><br>ls <span class="hljs-operator">-</span>ah<span class="hljs-comment">// Linux下可以看见隐藏的文件</span><br></code></pre></td></tr></table></figure><p>此时会生成一个 <strong>.git</strong> 文件，是 Git 用来跟踪管理版本的</p><h4 id="3）把文件添加到版本库"><a href="#3）把文件添加到版本库" class="headerlink" title="3）把文件添加到版本库"></a>3）把文件添加到版本库</h4><p>在<strong>新建的目录下</strong>，新建一个 <strong>readme.md</strong> 文件，文件内写上（不要用win自带的文本编辑器打开编写）：</p><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mercury">Git <span class="hljs-keyword">is</span> a version control system.<br>Git <span class="hljs-keyword">is</span> free software.<br></code></pre></td></tr></table></figure><p>使用 <strong>Git</strong> 命令 把文件添加到仓库：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 第一步，添加文件到仓库</span><br>$ git add readme<span class="hljs-selector-class">.md</span><br><br><span class="hljs-comment">// 第二步，将文件提交到仓库</span><br>$ git commit -m <span class="hljs-string">&quot;添加本次仓库测试的文档&quot;</span><br><br><span class="hljs-selector-attr">[main (root-commit) 8d1a06f]</span> 添加本次仓库测试的文档<br> <span class="hljs-number">1</span> file changed, <span class="hljs-number">0</span> <span class="hljs-built_in">insertions</span>(+), <span class="hljs-number">0</span> <span class="hljs-built_in">deletions</span>(-)<br> create mode <span class="hljs-number">100644</span> readme<span class="hljs-selector-class">.md</span><br><br></code></pre></td></tr></table></figure><p><strong>git commit -m “添加本次仓库测试的文档”</strong> 命令，**-m** 后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p><h3 id="2、添加远程库"><a href="#2、添加远程库" class="headerlink" title="2、添加远程库"></a>2、添加远程库</h3><p>现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。</p><h4 id="1）在GitHub上创建一个新的仓库"><a href="#1）在GitHub上创建一个新的仓库" class="headerlink" title="1）在GitHub上创建一个新的仓库"></a>1）在GitHub上创建一个新的仓库</h4><p>图形化操作</p><h4 id="2）绑定远程仓库"><a href="#2）绑定远程仓库" class="headerlink" title="2）绑定远程仓库"></a>2）绑定远程仓库</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// 使用命令下面命令绑定远程库      git remote add [远端仓库别名] [远端仓库地址]</span><br>$ git remote add MyWebServer_origin git<span class="hljs-keyword">@github</span>.<span class="hljs-attribute">com</span>:zy674517173/MyWebServer_origin.git<br></code></pre></td></tr></table></figure><h4 id="3）把本地库的内容推送到远程库"><a href="#3）把本地库的内容推送到远程库" class="headerlink" title="3）把本地库的内容推送到远程库"></a>3）把本地库的内容推送到远程库</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 使用命令下面命令推送      git push -u [远端仓库别名] [推送的位置]</span><br>$ git push -u <span class="hljs-type">MyWebServer_origin</span> main<br><br><span class="hljs-type">Enumerating</span> objects: <span class="hljs-number">5</span>, <span class="hljs-keyword">done</span>.<br><span class="hljs-type">Counting</span> objects: <span class="hljs-number">100</span>% (<span class="hljs-number">5</span>/<span class="hljs-number">5</span>), <span class="hljs-keyword">done</span>.<br><span class="hljs-type">Delta</span> compression using up <span class="hljs-keyword">to</span> <span class="hljs-number">12</span> threads<br><span class="hljs-type">Compressing</span> objects: <span class="hljs-number">100</span>% (<span class="hljs-number">2</span>/<span class="hljs-number">2</span>), <span class="hljs-keyword">done</span>.<br><span class="hljs-type">Writing</span> objects: <span class="hljs-number">100</span>% (<span class="hljs-number">4</span>/<span class="hljs-number">4</span>), <span class="hljs-number">384</span> <span class="hljs-built_in">bytes</span> | <span class="hljs-number">384.00</span> <span class="hljs-type">KiB</span>/s, <span class="hljs-keyword">done</span>.<br><span class="hljs-type">Total</span> <span class="hljs-number">4</span> (delta <span class="hljs-number">1</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>), pack-reused <span class="hljs-number">0</span> (from <span class="hljs-number">0</span>)<br>remote: <span class="hljs-type">Resolving</span> deltas: <span class="hljs-number">100</span>% (<span class="hljs-number">1</span>/<span class="hljs-number">1</span>), <span class="hljs-keyword">done</span>.<br><span class="hljs-type">To</span> github.com:zy674517173/<span class="hljs-type">MyWebServer_origin</span>.git<br>   af59730..<span class="hljs-number">5</span>aa9a4d  main -&gt; main<br>branch <span class="hljs-symbol">&#x27;main&#x27;</span> set up <span class="hljs-keyword">to</span> track <span class="hljs-symbol">&#x27;MyWebServer_origin</span>/main&#x27;.<br></code></pre></td></tr></table></figure><p><strong>报错</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">error: failed <span class="hljs-built_in">to</span> push some refs <span class="hljs-built_in">to</span> <span class="hljs-string">&#x27;github.com:zy674517173/MyWebServer_origin.git&#x27;</span><br>hint: Updates were rejected because <span class="hljs-keyword">the</span> remote <span class="hljs-keyword">contains</span> work that you <span class="hljs-built_in">do</span> <span class="hljs-keyword">not</span><br>hint: have locally. This is usually caused <span class="hljs-keyword">by</span> another repository pushing <span class="hljs-built_in">to</span><br>hint: <span class="hljs-keyword">the</span> same ref. If you want <span class="hljs-built_in">to</span> integrate <span class="hljs-keyword">the</span> remote changes, use<br>hint: <span class="hljs-string">&#x27;git pull&#x27;</span> <span class="hljs-keyword">before</span> pushing again.<br>hint: See <span class="hljs-keyword">the</span> <span class="hljs-string">&#x27;Note about fast-forwards&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;git push --help&#x27;</span> <span class="hljs-keyword">for</span> details.<br><br>解决方案<br>将仓库里的 README.md 文件删除，然后执行命令<br>$ git pull MyWebServer_origin main <span class="hljs-comment">--allow-unrelated-histories   // 从远端仓库拉取，同步本地</span><br></code></pre></td></tr></table></figure><h4 id="4）后续"><a href="#4）后续" class="headerlink" title="4）后续"></a>4）后续</h4><p>从现在开始，本地做了提交，就可以通过命令</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git <span class="hljs-built_in">push</span> MyWebServer_origin main<br></code></pre></td></tr></table></figure><p>把本地的 <strong>main</strong> 分支的最新修改推送至 GitHub 。</p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>关联一个远程库时必须给远程库指定一个名字，<code>origin</code> 是默认习惯命名；</p><p>关联后，使用命令 <strong>git push -u origin master</strong> 第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令 <strong>git push origin master</strong> 推送最新修改；</p><h4 id="5）删除远程库"><a href="#5）删除远程库" class="headerlink" title="5）删除远程库"></a>5）删除远程库</h4><h5 id="查看远程库信息"><a href="#查看远程库信息" class="headerlink" title="查看远程库信息"></a>查看远程库信息</h5><p>如果添加的时候地址写错了，或者就是想删除远程库，可以用 <strong>git remote rm [name]</strong> 命令。使用前，建议先用 <strong>git remote -v</strong> 查看远程库的信息：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">$ git remote -v<br>MyWebServer_origin      git<span class="hljs-keyword">@github</span>.<span class="hljs-attribute">com</span>:zy674517173/MyWebServer_origin.git (fetch)<br>MyWebServer_origin      git<span class="hljs-keyword">@github</span>.<span class="hljs-attribute">com</span>:zy674517173/MyWebServer_origin.git (push)<br></code></pre></td></tr></table></figure><p>然后根据名字删除，比如</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> git remote <span class="hljs-built_in">rm</span> MyWebServer_origin<br></code></pre></td></tr></table></figure><h2 id="VsCode内使用Git版本控制"><a href="#VsCode内使用Git版本控制" class="headerlink" title="VsCode内使用Git版本控制"></a>VsCode内使用Git版本控制</h2><p>在VsCode中打开本地仓库，然后点击版本控制，如果提示 <strong>未找到Git。请安装Git，或在git.path设置中配置</strong></p><p>配置过程：设置 —&gt; 在搜索框输入 <code>git.path</code> —&gt; settings.json 中编辑</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// win系统</span><br><span class="hljs-string">&quot;git.path&quot;</span>: <span class="hljs-string">&quot;E:<span class="hljs-subst">\\</span>Program Files<span class="hljs-subst">\\</span>Git<span class="hljs-subst">\\</span>bin<span class="hljs-subst">\\</span>git.exe&quot;</span><br><br><span class="hljs-comment">// linux系统</span><br><span class="hljs-string">&quot;git.path&quot;</span>: <span class="hljs-string">&quot;/Program Files/Git/bin/git.exe&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>General</title>
    <link href="/2024/05/31/General/"/>
    <url>/2024/05/31/General/</url>
    
    <content type="html"><![CDATA[<h1 id="总则"><a href="#总则" class="headerlink" title="总则"></a>总则</h1><p>hexo官方网站：[<a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a>]</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/05/31/hello-world/"/>
    <url>/2024/05/31/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署到远端网址"><a href="#部署到远端网址" class="headerlink" title="部署到远端网址"></a>部署到远端网址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="Hexo遇到的问题"><a href="#Hexo遇到的问题" class="headerlink" title="Hexo遇到的问题"></a>Hexo遇到的问题</h2><h3 id="部署到GitHub后不能显示主题，只有文字"><a href="#部署到GitHub后不能显示主题，只有文字" class="headerlink" title="部署到GitHub后不能显示主题，只有文字"></a>部署到GitHub后不能显示主题，只有文字</h3><p><strong>原因：</strong> </p><p>1、GitHub 上的博客搭建到了仓库里，也就是博客跟地址是<a href="https://xxx.github.io/">https://XXX.github.io/</a><repository_name>上，而不是根目录<a href="https://xxx.github.io/%E4%B8%AD">https://XXX.github.io/中</a></p><p>2.由于主题中的各种图片、js脚本都是默认根路径的</p><p><strong>如何修改：</strong> 将Hexo的 <code>config.yml</code> 中的 <code>url</code> 改为根目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 原来是 url: https://zy674517173.github.io/archive<br>url: https://zy674517173.github.io<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
