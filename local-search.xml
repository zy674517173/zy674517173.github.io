<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>刷题笔记</title>
    <link href="/2024/07/10/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/07/10/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="刷题笔记"><a href="#刷题笔记" class="headerlink" title="刷题笔记"></a>刷题笔记</h1><h1 id="洛谷刷题"><a href="#洛谷刷题" class="headerlink" title="洛谷刷题"></a>洛谷刷题</h1><p>产生长度为5的回文数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (d1 = <span class="hljs-number">1</span>; d1 &lt;= <span class="hljs-number">9</span>; d1+=<span class="hljs-number">2</span>) &#123;    <span class="hljs-comment">// 只有奇数才会是素数</span><br>     <span class="hljs-keyword">for</span> (d2 = <span class="hljs-number">0</span>; d2 &lt;= <span class="hljs-number">9</span>; d2++) &#123;<br>         <span class="hljs-keyword">for</span> (d3 = <span class="hljs-number">0</span>; d3 &lt;= <span class="hljs-number">9</span>; d3++) &#123;<br>           palindrome = <span class="hljs-number">10000</span>*d1 + <span class="hljs-number">1000</span>*d2 +<span class="hljs-number">100</span>*d3 + <span class="hljs-number">10</span>*d2 + d1;<span class="hljs-comment">//(处理回文数...)</span><br>         &#125;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>埃氏筛：给定整数n ，返回 <em>所有小于非负整数 <code>n</code> 的质数的数量</em> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countPrimes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">isPrime</span><span class="hljs-params">(n, <span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (isPrime[i]) &#123;<br>                ans += <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> ((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)i * i &lt; n) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i * i; j &lt; n; j += i) &#123;<br>                        isPrime[j] = <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>二维vector的初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">s</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; (<span class="hljs-number">4</span>));<br></code></pre></td></tr></table></figure><p>另外sort不能对二维数组进行排序</p><h1 id="力扣刷题"><a href="#力扣刷题" class="headerlink" title="力扣刷题"></a>力扣刷题</h1><h2 id="十进制转任意进制"><a href="#十进制转任意进制" class="headerlink" title="十进制转任意进制"></a>十进制转任意进制</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 【分析】</span><br><span class="hljs-comment">//  n = …… + a * (base)^5 + b * (base)^4 + c * (base)^3 + d * (base)^2 + e * (base)^1 + f * (base)^0</span><br><span class="hljs-comment">//  若base为正数，则n也必定为非负数</span><br><span class="hljs-comment">//  若base为负数，则n可为所有整数</span><br><br><span class="hljs-comment">// 【任意base的通用写法】</span><br><span class="hljs-function">string <span class="hljs-title">baseAny</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> base)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>;<br><br>    string ans;<br>    <span class="hljs-keyword">while</span> (n != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">// 获取当前最低位</span><br>        <span class="hljs-type">int</span> r = n % base;<br>        <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>)     <span class="hljs-comment">// 说明 base 必为负数</span><br>            r -= base; <span class="hljs-comment">// 保证找到的余数在有效范围 [0, base - 1] 内</span><br>        n -= r;        <span class="hljs-comment">// 将最后一位抹零，保证后续是整除，从而保证不同语言通用</span><br>        <span class="hljs-keyword">if</span> (r &gt;= <span class="hljs-number">10</span>)<br>            ans += <span class="hljs-string">&#x27;A&#x27;</span> + r - <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">else</span><br>            ans += <span class="hljs-string">&#x27;0&#x27;</span> + r;<br><br>        <span class="hljs-comment">// 将n的进制表达式向右移一位</span><br>        n /= base;<br>    &#125;<br>    <span class="hljs-built_in">reverse</span>(ans.<span class="hljs-built_in">begin</span>(), ans.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br>作者：Yvette<br>链接：https:<span class="hljs-comment">//leetcode.cn/problems/convert-to-base-2/solutions/2211859/jin-zhi-biao-da-shi-de-ben-zhi-bu-tong-y-1x4a/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure><h1 id="代码随想录"><a href="#代码随想录" class="headerlink" title="代码随想录"></a>代码随想录</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="3-移除元素-双指针方法"><a href="#3-移除元素-双指针方法" class="headerlink" title="3.移除元素      双指针方法"></a>3.移除元素      双指针方法</h3><h4 id="884-比较含退格的字符串"><a href="#884-比较含退格的字符串" class="headerlink" title="884.比较含退格的字符串"></a>884.比较含退格的字符串</h4><p>一个字符是否会被删掉，只取决于该字符后面的退格符，而与该字符前面的退格符无关。因此当我们逆序地遍历字符串，就可以立即确定当前字符是否会被删掉。</p><p>具体地，我们定义 skip 表示当前待删除的字符的数量。每次我们遍历到一个字符：</p><p>若该字符为退格符，则我们需要多删除一个普通字符，我们让 skip 加 1；</p><p>若该字符为普通字符：</p><p>若 skip 为 0，则说明当前字符不需要删去；</p><p>若 skip 不为 0，则说明当前字符需要删去，我们让 skip 减 1。</p><p>这样，我们定义两个指针，分别指向两字符串的末尾。每次我们让两指针逆序地遍历两字符串，直到两字符串能够各自确定一个字符，然后将这两个字符进行比较。重复这一过程直到找到的两个字符不相等，或遍历完字符串为止。</p><p>作者：力扣官方题解<br>链接：<a href="https://leetcode.cn/problems/backspace-string-compare/solutions/451606/bi-jiao-han-tui-ge-de-zi-fu-chuan-by-leetcode-solu/">https://leetcode.cn/problems/backspace-string-compare/solutions/451606/bi-jiao-han-tui-ge-de-zi-fu-chuan-by-leetcode-solu/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">backspaceCompare</span><span class="hljs-params">(string s, string t)</span> </span>&#123;<br>        <span class="hljs-type">int</span> i = s,<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, j = t.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> skipS = <span class="hljs-number">0</span>, skipT = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(i &gt;= <span class="hljs-number">0</span> || j &gt;= <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(i &gt;= <span class="hljs-number">0</span>)<span class="hljs-comment">// 处理#</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;#&#x27;</span>)<span class="hljs-comment">// 如果遇到 #, 计数器+1，并且跳过这个#</span><br>                &#123;<br>                    skipS++, i--;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(skipS &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">// 如果计数器 &gt; 0，则跳过下一个字符，计数器-1 </span><br>                &#123;<br>                    skipS--, i--;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">while</span>(j &gt;= <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(t[j] == <span class="hljs-string">&#x27;#&#x27;</span>)<br>                &#123;<br>                    skipT++, j--;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(skipT &gt; <span class="hljs-number">0</span>)<br>                &#123;<br>                    skipT--, j--;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &gt;= <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">if</span>(s[i] != t[j])    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//经过前面的处理，是没有#和删除的字符</span><br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">if</span>(i &gt;= <span class="hljs-number">0</span> || j &gt;= <span class="hljs-number">0</span>)    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">// 如果两个不一样长，就k</span><br>            i--, j--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="5-长度最小的子数组"><a href="#5-长度最小的子数组" class="headerlink" title="5. 长度最小的子数组"></a>5. 长度最小的子数组</h3><h4 id="904水果成篮-滑动区间unordered-map使用"><a href="#904水果成篮-滑动区间unordered-map使用" class="headerlink" title="904水果成篮         滑动区间unordered_map使用"></a>904水果成篮         滑动区间unordered_map使用</h4><p><strong>问题：</strong>怎么判断滑动区间内元素种类？采用哈希表unordered_map来统计，或者构建数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建一个unordered_map，键是string类型，值是int类型</span><br>    std::unordered_map&lt;std::string, <span class="hljs-type">int</span>&gt; myMap;<br><br>    <span class="hljs-comment">// 插入元素</span><br>    myMap[<span class="hljs-string">&quot;apple&quot;</span>] = <span class="hljs-number">5</span>;<br>    myMap[<span class="hljs-string">&quot;banana&quot;</span>] = <span class="hljs-number">3</span>;<br>    myMap[<span class="hljs-string">&quot;orange&quot;</span>] = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-comment">// 查找元素</span><br>    std::string fruit = <span class="hljs-string">&quot;banana&quot;</span>;<br>    <span class="hljs-keyword">if</span> (myMap.<span class="hljs-built_in">find</span>(fruit) != myMap.<span class="hljs-built_in">end</span>()) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;The number of &quot;</span> &lt;&lt; fruit &lt;&lt; <span class="hljs-string">&quot; is: &quot;</span> &lt;&lt; myMap[fruit] &lt;&lt; std::endl;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;No information available for &quot;</span> &lt;&lt; fruit &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-comment">// 遍历unordered_map</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; pair : myMap) &#123;<br>        std::cout &lt;&lt; pair.first &lt;&lt; <span class="hljs-string">&quot;: &quot;</span> &lt;&lt; pair.second &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除元素</span><br>    myMap.<span class="hljs-built_in">erase</span>(<span class="hljs-string">&quot;orange&quot;</span>);<br><br>    <span class="hljs-comment">// 遍历unordered_map</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; pair : myMap) &#123;<br>        std::cout &lt;&lt; pair.first &lt;&lt; <span class="hljs-string">&quot;: &quot;</span> &lt;&lt; pair.second &lt;&lt; std::endl;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 获取unordered_map的长度</span><br>    cout &lt;&lt; myMap.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-螺旋数组Ⅱ"><a href="#6-螺旋数组Ⅱ" class="headerlink" title="6. 螺旋数组Ⅱ"></a>6. 螺旋数组Ⅱ</h3><h4 id="二维vector的定义"><a href="#二维vector的定义" class="headerlink" title="二维vector的定义"></a>二维vector的定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;<span class="hljs-built_in">res</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n, <span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure><h4 id="螺旋矩阵"><a href="#螺旋矩阵" class="headerlink" title="螺旋矩阵"></a>螺旋矩阵</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">spiralOrder</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(matrix.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>|| matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)  <span class="hljs-keyword">return</span> &#123;&#125;;<br>        <br>        <span class="hljs-type">int</span> m = matrix.<span class="hljs-built_in">size</span>(), n = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(m * n, <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = n - <span class="hljs-number">1</span>, top = <span class="hljs-number">0</span>, bottom = m - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(left &lt;= right &amp;&amp; top &lt;= bottom)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = left; j &lt; right; j++)   res[count++] = matrix[top][j];<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = top; i &lt;= bottom; i++)   res[count++] = matrix[i][right];<br><br>            <span class="hljs-keyword">if</span>(left &lt; right &amp;&amp; top &lt; bottom)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = right - <span class="hljs-number">1</span>; j &gt; left; j--)   res[count++] = matrix[bottom][j];<br><br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = bottom; i &gt; top; i--)   res[count++] = matrix[i][left];<br>            &#125;<br><br>            left++, right--, top++, bottom--;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 单链表</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;  <span class="hljs-comment">// 节点上存储的元素</span><br>    ListNode *next;  <span class="hljs-comment">// 指向下一个节点的指针</span><br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;  <span class="hljs-comment">// 节点的构造函数</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>有同学说了，我不定义构造函数行不行，答案是可以的，C++默认生成一个构造函数。</p><p>但是这个构造函数不会初始化任何成员变量，下面我来举两个例子：</p><p>通过自己定义构造函数初始化节点：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">ListNode* head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>使用默认构造函数初始化节点：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">ListNode* head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>();<br>head-&gt;val = <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><p>所以如果不定义构造函数使用默认构造函数的话，在初始化的时候就不能直接给变量赋值！</p><h3 id="虚拟头节点"><a href="#虚拟头节点" class="headerlink" title="虚拟头节点"></a>虚拟头节点</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ListNode* dummyHead = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// 设置一个虚拟头结点</span><br>dummyHead-&gt;next = head; <span class="hljs-comment">// 将虚拟头结点指向head，这样方便后面做删除操作</span><br></code></pre></td></tr></table></figure><h3 id="翻转链表"><a href="#翻转链表" class="headerlink" title="翻转链表"></a>翻转链表</h3><p><strong>双指针法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode* temp; <span class="hljs-comment">// 保存cur的下一个节点</span><br>        ListNode* cur = head;<br>        ListNode* pre = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">while</span>(cur) &#123;<br>            temp = cur-&gt;next;  <span class="hljs-comment">// 保存一下 cur的下一个节点，因为接下来要改变cur-&gt;next</span><br>            cur-&gt;next = pre; <span class="hljs-comment">// 翻转操作</span><br>            <span class="hljs-comment">// 更新pre 和 cur指针</span><br>            pre = cur;<br>            cur = temp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>递归法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode* pre,ListNode* cur)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(cur == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> pre;<br>        ListNode* temp = cur-&gt;next;<br>        cur-&gt;next = pre;<br>        <span class="hljs-comment">// 可以和双指针法的代码进行对比，如下递归的写法，其实就是做了这两步</span><br>        <span class="hljs-comment">// pre = cur;</span><br>        <span class="hljs-comment">// cur = temp;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">reverse</span>(cur,temp);<br>    &#125;<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-comment">// 和双指针法初始化是一样的逻辑</span><br>        <span class="hljs-comment">// ListNode* cur = head;</span><br>        <span class="hljs-comment">// ListNode* pre = NULL;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">reverse</span>(<span class="hljs-literal">NULL</span>, head);<br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h3><p>重点是推导的过程，详见代码随想录</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>        ListNode* fast = head;<br>        ListNode* slow = head;<br>        <span class="hljs-keyword">while</span>(fast != <span class="hljs-literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>            slow = slow-&gt;next;<br>            fast = fast-&gt;next-&gt;next;<br>            <span class="hljs-comment">// 快慢指针相遇，此时从head 和 相遇点，同时查找直至相遇</span><br>            <span class="hljs-keyword">if</span> (slow == fast) &#123;<br>                ListNode* index1 = fast;<br>                ListNode* index2 = head;<br>                <span class="hljs-keyword">while</span> (index1 != index2) &#123;<br>                    index1 = index1-&gt;next;<br>                    index2 = index2-&gt;next;<br>                &#125;<br>                <span class="hljs-keyword">return</span> index2; <span class="hljs-comment">// 返回环的入口</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">asset_img</span> 链表总结.png 链表总结 %&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E9%93%BE%E8%A1%A8%E6%80%BB%E7%BB%93.png"></p><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>总结一下，<strong>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法</strong>。</p><p>但是哈希法也是<strong>牺牲了空间换取了时间</strong>，因为我们要使用额外的数组，set或者是map来存放数据，才能实现快速的查找。</p><p>如果在做面试题目的时候遇到需要判断一个元素是否出现过的场景也应该第一时间想到哈希法！</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">数组<br>set、unordered_set<br>map、unordered_<br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyWebServer</title>
    <link href="/2024/06/02/MyWebServer/"/>
    <url>/2024/06/02/MyWebServer/</url>
    
    <content type="html"><![CDATA[<h1 id="MyWebServer"><a href="#MyWebServer" class="headerlink" title="MyWebServer"></a>MyWebServer</h1><h2 id="webserver学习总结"><a href="#webserver学习总结" class="headerlink" title="webserver学习总结"></a>webserver学习总结</h2><h3 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h3><p>[1、小白视角：一文读懂社长的TinyWebServer(Raw_Version)](<a href="https://huixxi.github.io/2020/06/02/%E5%B0%8F%E7%99%BD%E8%A7%86%E8%A7%92%EF%BC%9A%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82%E7%A4%BE%E9%95%BF%E7%9A%84TinyWebServer/#more">小白视角：一文读懂社长的TinyWebServer | HU (huixxi.github.io)</a>)</p><h3 id="Socket网络编程"><a href="#Socket网络编程" class="headerlink" title="Socket网络编程"></a>Socket网络编程</h3><h4 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h4><p>使用webbench工具进行测试，直接运行因为权限问题不够找不到命令无法执行，使用下面的命令</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">gcc webbench.c -o webbench<br></code></pre></td></tr></table></figure><p>重新编译该文件时遇到报错</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">webbench.c:<span class="hljs-number">21</span>:<span class="hljs-number">10</span>: fatal error: rpc/types.h: 没有那个文件或目录<br>   <span class="hljs-number">21</span> | <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;rpc/types.h&gt;</span></span><br>      |          ^~~~~~~~~~~~~<br>解决方案：将&lt;rpc/typed.h&gt;改为&lt;sys/typed.h&gt;后重新编译<br></code></pre></td></tr></table></figure><p>然后在解压目录打开终端运行命令（<code>-c</code>表示客户端数， <code>-t</code>表示时间）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">./webbench -c <span class="hljs-number">10001</span> -t <span class="hljs-number">5</span> http:<span class="hljs-comment">//127.0.0.1:9006/</span><br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">Webbench - Simple Web Benchmark <span class="hljs-number">1.5</span><br>Copyright (c) Radim Kolar <span class="hljs-number">1997</span><span class="hljs-number">-2004</span>, GPL Open Source Software.<br><br>Benchmarking: GET http:<span class="hljs-comment">//127.0.0.1:9007/</span><br><span class="hljs-number">10001</span> clients, running <span class="hljs-number">5</span> sec.<br><br>Speed=<span class="hljs-number">503340</span> pages/min, <span class="hljs-number">939568</span> bytes/sec.<br>Requests: <span class="hljs-number">41945</span> susceed, <span class="hljs-number">0</span> failed.<br></code></pre></td></tr></table></figure><h4 id="Webbench是什么，介绍一下原理"><a href="#Webbench是什么，介绍一下原理" class="headerlink" title="Webbench是什么，介绍一下原理"></a>Webbench是什么，介绍一下原理</h4><p>WebBench 是一个简单、实用的 Web 压力测试工具。它主要用于测试 Web 服务器的性能，通过模拟大量客户端访问服务器，以评估服务器在高负载下的表现。</p><p>父进程fork若干个子进程，每个子进程在用户要求时间或默认的时间内对目标web循环发出实际访问请求，父子进程通过管道进行通信，子进程通过管道写端向父进程传递在若干次请求访问完毕后记录到的总信息，父进程通过管道读端读取子进程发来的相关信息，子进程在时间到后结束，父进程在所有子进程退出后统计并给用户显示最后的测试结果，然后退出。</p><h2 id="添加功能"><a href="#添加功能" class="headerlink" title="添加功能"></a>添加功能</h2><h3 id="添加一个HTML和CSS的登录界面"><a href="#添加一个HTML和CSS的登录界面" class="headerlink" title="添加一个HTML和CSS的登录界面"></a>添加一个HTML和CSS的登录界面</h3><p>HTML和CSS素材来自：<a href="https://mp.weixin.qq.com/s/0snX38O4LQsglgd_dsY57g">微信公众号</a></p><h4 id="代码中响应HTTP的逻辑部分"><a href="#代码中响应HTTP的逻辑部分" class="headerlink" title="代码中响应HTTP的逻辑部分"></a>代码中响应HTTP的逻辑部分</h4><p>该方法中可以根据HTML代码中的 <code>form</code> 中的 <code>action</code> 和 <code>post</code> 方法，来传输到服务器中进行逻辑判断</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>新用户<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>服务器代码中实现处理HTTP请求的方法在文件 <code>http_conn.cpp</code> 中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 处理HTTP请求的方法</span><br><span class="hljs-function">http_conn::HTTP_CODE <span class="hljs-title">http_conn::do_request</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">strcpy</span>(m_real_file, doc_root);      <span class="hljs-comment">// 将 doc_root 的值复制到 m_real_file 中</span><br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(doc_root);<br>    <span class="hljs-comment">//printf(&quot;m_url:%s\n&quot;, m_url);</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *p = <span class="hljs-built_in">strrchr</span>(m_url, <span class="hljs-string">&#x27;/&#x27;</span>);    <span class="hljs-comment">// 查找m_url中最后一个/字符的位置。</span><br><br>    <span class="hljs-comment">//处理cgi       如果cgi标志为1，并且URL中最后一个/后面紧跟的字符是&#x27;2&#x27;或&#x27;3&#x27;，进入处理CGI部分的代码块。</span><br>    <span class="hljs-keyword">if</span> (cgi == <span class="hljs-number">1</span> &amp;&amp; (*(p + <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;2&#x27;</span> || *(p + <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;3&#x27;</span>))   <br>    &#123;<br>        <span class="hljs-comment">//根据标志判断是登录检测还是注册检测</span><br>        <span class="hljs-type">char</span> flag = m_url[<span class="hljs-number">1</span>];  <span class="hljs-comment">// 获取m_url中的第二个字符，存储在flag中。</span><br><br>        <span class="hljs-comment">// 动态分配200字节的内存给m_url_real，并将m_url从第三个字符开始的子串连接到/后面，</span><br>        <span class="hljs-comment">// 构建新的URL路径，最后将其复制到m_real_file中，并释放分配的内存。</span><br>        <span class="hljs-type">char</span> *m_url_real = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>) * <span class="hljs-number">200</span>);<br>        <span class="hljs-built_in">strcpy</span>(m_url_real, <span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-built_in">strcat</span>(m_url_real, m_url + <span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">strncpy</span>(m_real_file + len, m_url_real, FILENAME_LEN - len - <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">free</span>(m_url_real);<br><br>        <span class="hljs-comment">//将用户名和密码提取出来</span><br>        <span class="hljs-comment">//user=123&amp;passwd=123</span><br>        <span class="hljs-type">char</span> name[<span class="hljs-number">100</span>], password[<span class="hljs-number">100</span>];<br>        <span class="hljs-type">int</span> i;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">5</span>; m_string[i] != <span class="hljs-string">&#x27;&amp;&#x27;</span>; ++i)<br>            name[i - <span class="hljs-number">5</span>] = m_string[i];<br>        name[i - <span class="hljs-number">5</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>        <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (i = i + <span class="hljs-number">10</span>; m_string[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; ++i, ++j)<br>            password[j] = m_string[i];<br>        password[j] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>        <span class="hljs-comment">//如果是注册，先检测数据库中是否有重名的</span><br>        <span class="hljs-comment">//没有重名的，进行增加数据</span><br>        <span class="hljs-keyword">if</span> (*(p + <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;3&#x27;</span>)<br>        &#123;<br>            <span class="hljs-type">char</span> *sql_insert = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>) * <span class="hljs-number">200</span>);<br>            <span class="hljs-built_in">strcpy</span>(sql_insert, <span class="hljs-string">&quot;INSERT INTO user(username, passwd) VALUES(&quot;</span>);<br>            <span class="hljs-built_in">strcat</span>(sql_insert, <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>            <span class="hljs-built_in">strcat</span>(sql_insert, name);<br>            <span class="hljs-built_in">strcat</span>(sql_insert, <span class="hljs-string">&quot;&#x27;, &#x27;&quot;</span>);<br>            <span class="hljs-built_in">strcat</span>(sql_insert, password);<br>            <span class="hljs-built_in">strcat</span>(sql_insert, <span class="hljs-string">&quot;&#x27;)&quot;</span>);<br><br>            <span class="hljs-keyword">if</span> (users.<span class="hljs-built_in">find</span>(name) == users.<span class="hljs-built_in">end</span>())<br>            &#123;<br>                m_lock.<span class="hljs-built_in">lock</span>();<br>                <span class="hljs-type">int</span> res = <span class="hljs-built_in">mysql_query</span>(mysql, sql_insert);<br>                users.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, string&gt;(name, password));<br>                m_lock.<span class="hljs-built_in">unlock</span>();<br><br>                <span class="hljs-keyword">if</span> (!res)<br>                    <span class="hljs-built_in">strcpy</span>(m_url, <span class="hljs-string">&quot;/log.html&quot;</span>);<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-built_in">strcpy</span>(m_url, <span class="hljs-string">&quot;/registerError.html&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">strcpy</span>(m_url, <span class="hljs-string">&quot;/registerError.html&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//如果是登录，直接判断</span><br>        <span class="hljs-comment">//若浏览器端输入的用户名和密码在表中可以查找到，返回1，否则返回0</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*(p + <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;2&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (users.<span class="hljs-built_in">find</span>(name) != users.<span class="hljs-built_in">end</span>() &amp;&amp; users[name] == password)<br>                <span class="hljs-built_in">strcpy</span>(m_url, <span class="hljs-string">&quot;/welcome.html&quot;</span>);<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">strcpy</span>(m_url, <span class="hljs-string">&quot;/logError.html&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (*(p + <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;0&#x27;</span>)    <span class="hljs-comment">// 如果`URL`中最后一个`/`后面的字符是&#x27;0&#x27;，处理注册页面请求：</span><br>    &#123;   <br>        <span class="hljs-comment">// 构建注册页面路径并复制到m_real_file中，然后释放动态分配的内存。</span><br>        <span class="hljs-type">char</span> *m_url_real = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>) * <span class="hljs-number">200</span>);<br>        <span class="hljs-built_in">strcpy</span>(m_url_real, <span class="hljs-string">&quot;/register.html&quot;</span>);<br>        <span class="hljs-built_in">strncpy</span>(m_real_file + len, m_url_real, <span class="hljs-built_in">strlen</span>(m_url_real));<br><br>        <span class="hljs-built_in">free</span>(m_url_real);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*(p + <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;1&#x27;</span>)   <span class="hljs-comment">// 如果`URL`中最后一个`/`后面的字符是&#x27;1&#x27;，处理登录页面请求：</span><br>    &#123;<br>        <span class="hljs-type">char</span> *m_url_real = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>) * <span class="hljs-number">200</span>);<br>        <span class="hljs-built_in">strcpy</span>(m_url_real, <span class="hljs-string">&quot;/log.html&quot;</span>);<br>        <span class="hljs-built_in">strncpy</span>(m_real_file + len, m_url_real, <span class="hljs-built_in">strlen</span>(m_url_real));<br><br>        <span class="hljs-built_in">free</span>(m_url_real);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*(p + <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;5&#x27;</span>) <span class="hljs-comment">// 如果`URL`中最后一个`/`后面的字符是&#x27;5&#x27;，处理图片页面请求：</span><br>    &#123;<br>        <span class="hljs-type">char</span> *m_url_real = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>) * <span class="hljs-number">200</span>);<br>        <span class="hljs-built_in">strcpy</span>(m_url_real, <span class="hljs-string">&quot;/picture.html&quot;</span>);<br>        <span class="hljs-built_in">strncpy</span>(m_real_file + len, m_url_real, <span class="hljs-built_in">strlen</span>(m_url_real));<br><br>        <span class="hljs-built_in">free</span>(m_url_real);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*(p + <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;6&#x27;</span>)  <span class="hljs-comment">// 如果`URL`中最后一个`/`后面的字符是&#x27;6&#x27;，处理视频页面请求：</span><br>    &#123;<br>        <span class="hljs-type">char</span> *m_url_real = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>) * <span class="hljs-number">200</span>);<br>        <span class="hljs-built_in">strcpy</span>(m_url_real, <span class="hljs-string">&quot;/video.html&quot;</span>);<br>        <span class="hljs-built_in">strncpy</span>(m_real_file + len, m_url_real, <span class="hljs-built_in">strlen</span>(m_url_real));<br><br>        <span class="hljs-built_in">free</span>(m_url_real);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*(p + <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;7&#x27;</span>)   <span class="hljs-comment">// 如果`URL`中最后一个`/`后面的字符是&#x27;7&#x27;，处理粉丝页面请求：</span><br>    &#123;<br>        <span class="hljs-type">char</span> *m_url_real = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>) * <span class="hljs-number">200</span>);<br>        <span class="hljs-built_in">strcpy</span>(m_url_real, <span class="hljs-string">&quot;/fans.html&quot;</span>);<br>        <span class="hljs-built_in">strncpy</span>(m_real_file + len, m_url_real, <span class="hljs-built_in">strlen</span>(m_url_real));<br><br>        <span class="hljs-built_in">free</span>(m_url_real);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">strncpy</span>(m_real_file + len, m_url, FILENAME_LEN - len - <span class="hljs-number">1</span>); <span class="hljs-comment">// 处理其他未明确指定的请求，直接将`m_url`复制到`m_real_file`中。</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">stat</span>(m_real_file, &amp;m_file_stat) &lt; <span class="hljs-number">0</span>)    <span class="hljs-comment">// 检查m_real_file是否存在。如果不存在，返回NO_RESOURCE错误</span><br>        <span class="hljs-keyword">return</span> NO_RESOURCE;<br><br>    <span class="hljs-keyword">if</span> (!(m_file_stat.st_mode &amp; S_IROTH))   <span class="hljs-comment">// 检查文件权限。如果文件不可读，返回`FORBIDDEN_REQUEST`错误。</span><br>        <span class="hljs-keyword">return</span> FORBIDDEN_REQUEST;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">S_ISDIR</span>(m_file_stat.st_mode))   <span class="hljs-comment">// 检查文件类型。如果是目录，返回BAD_REQUEST错误。</span><br>        <span class="hljs-keyword">return</span> BAD_REQUEST;<br><br>    <span class="hljs-comment">// 打开文件并将其映射到内存中，然后关闭文件描述符，返回`FILE_REQUEST`。</span><br>    <span class="hljs-type">int</span> fd = <span class="hljs-built_in">open</span>(m_real_file, O_RDONLY);<br>    m_file_address = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">mmap</span>(<span class="hljs-number">0</span>, m_file_stat.st_size, PROT_READ, MAP_PRIVATE, fd, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">close</span>(fd);<br>    <span class="hljs-keyword">return</span> FILE_REQUEST;<br>&#125;<br></code></pre></td></tr></table></figure><p>用GPT生成了 <code>root</code> 目录下的 <code>style.css</code> 文件，修改了 <code>judge.html</code> 、<code>log.html</code> 、<code>register.html</code> 文件，使其符合要求</p><p>其中，有一部分不太明白，我觉得应该去看看HTML请求体的结构和内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;2CGISQL.cgi&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>用户名:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;required&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 这部分不太懂 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>密码:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;登录密码&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;required&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 这部分不太懂 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>page_1</title>
    <link href="/2024/06/01/page_1/"/>
    <url>/2024/06/01/page_1/</url>
    
    <content type="html"><![CDATA[<h1 id="如何使用Vscode和github完成代码版本控制"><a href="#如何使用Vscode和github完成代码版本控制" class="headerlink" title="如何使用Vscode和github完成代码版本控制"></a>如何使用Vscode和github完成代码版本控制</h1><h2 id="Git使用"><a href="#Git使用" class="headerlink" title="Git使用"></a>Git使用</h2><p>参考内容：<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896827951938304">廖雪峰git教程</a></p><h3 id="1、创建本地版本库"><a href="#1、创建本地版本库" class="headerlink" title="1、创建本地版本库"></a>1、创建本地版本库</h3><h4 id="1）选择合适的地方，创建一个空目录，并进入目录"><a href="#1）选择合适的地方，创建一个空目录，并进入目录" class="headerlink" title="1）选择合适的地方，创建一个空目录，并进入目录"></a>1）选择合适的地方，创建一个空目录，并进入目录</h4><p>win系统下最好不包括中文目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> MyWebServer</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> MyWebServer</span><br></code></pre></td></tr></table></figure><h4 id="2）将目录变成git可以管理的仓库"><a href="#2）将目录变成git可以管理的仓库" class="headerlink" title="2）将目录变成git可以管理的仓库"></a>2）将目录变成git可以管理的仓库</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift">$ git <span class="hljs-keyword">init</span><br><span class="hljs-type">Initialized</span> empty <span class="hljs-type">Git</span> repository <span class="hljs-keyword">in</span> <span class="hljs-type">E</span>:<span class="hljs-regexp">/MyGit/</span><span class="hljs-type">MyWebServer</span><span class="hljs-regexp">/.git/</span><br><br>ls <span class="hljs-operator">-</span>ah<span class="hljs-comment">// Linux下可以看见隐藏的文件</span><br></code></pre></td></tr></table></figure><p>此时会生成一个 <strong>.git</strong> 文件，是 Git 用来跟踪管理版本的</p><h4 id="3）把文件添加到版本库"><a href="#3）把文件添加到版本库" class="headerlink" title="3）把文件添加到版本库"></a>3）把文件添加到版本库</h4><p>在<strong>新建的目录下</strong>，新建一个 <strong>readme.md</strong> 文件，文件内写上（不要用win自带的文本编辑器打开编写）：</p><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mercury">Git <span class="hljs-keyword">is</span> a version control system.<br>Git <span class="hljs-keyword">is</span> free software.<br></code></pre></td></tr></table></figure><p>使用 <strong>Git</strong> 命令 把文件添加到仓库：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 第一步，添加文件到仓库</span><br>$ git add readme<span class="hljs-selector-class">.md</span><br><br><span class="hljs-comment">// 第二步，将文件提交到仓库</span><br>$ git commit -m <span class="hljs-string">&quot;添加本次仓库测试的文档&quot;</span><br><br><span class="hljs-selector-attr">[main (root-commit) 8d1a06f]</span> 添加本次仓库测试的文档<br> <span class="hljs-number">1</span> file changed, <span class="hljs-number">0</span> <span class="hljs-built_in">insertions</span>(+), <span class="hljs-number">0</span> <span class="hljs-built_in">deletions</span>(-)<br> create mode <span class="hljs-number">100644</span> readme<span class="hljs-selector-class">.md</span><br><br></code></pre></td></tr></table></figure><p><strong>git commit -m “添加本次仓库测试的文档”</strong> 命令，**-m** 后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p><h3 id="2、添加远程库"><a href="#2、添加远程库" class="headerlink" title="2、添加远程库"></a>2、添加远程库</h3><p>现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。</p><h4 id="1）在GitHub上创建一个新的仓库"><a href="#1）在GitHub上创建一个新的仓库" class="headerlink" title="1）在GitHub上创建一个新的仓库"></a>1）在GitHub上创建一个新的仓库</h4><p>图形化操作</p><h4 id="2）绑定远程仓库"><a href="#2）绑定远程仓库" class="headerlink" title="2）绑定远程仓库"></a>2）绑定远程仓库</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// 使用命令下面命令绑定远程库      git remote add [远端仓库别名] [远端仓库地址]</span><br>$ git remote add MyWebServer_origin git<span class="hljs-keyword">@github</span>.<span class="hljs-attribute">com</span>:zy674517173/MyWebServer_origin.git<br></code></pre></td></tr></table></figure><h4 id="3）把本地库的内容推送到远程库"><a href="#3）把本地库的内容推送到远程库" class="headerlink" title="3）把本地库的内容推送到远程库"></a>3）把本地库的内容推送到远程库</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 使用命令下面命令推送      git push -u [远端仓库别名] [推送的位置]</span><br>$ git push -u <span class="hljs-type">MyWebServer_origin</span> main<br><br><span class="hljs-type">Enumerating</span> objects: <span class="hljs-number">5</span>, <span class="hljs-keyword">done</span>.<br><span class="hljs-type">Counting</span> objects: <span class="hljs-number">100</span>% (<span class="hljs-number">5</span>/<span class="hljs-number">5</span>), <span class="hljs-keyword">done</span>.<br><span class="hljs-type">Delta</span> compression using up <span class="hljs-keyword">to</span> <span class="hljs-number">12</span> threads<br><span class="hljs-type">Compressing</span> objects: <span class="hljs-number">100</span>% (<span class="hljs-number">2</span>/<span class="hljs-number">2</span>), <span class="hljs-keyword">done</span>.<br><span class="hljs-type">Writing</span> objects: <span class="hljs-number">100</span>% (<span class="hljs-number">4</span>/<span class="hljs-number">4</span>), <span class="hljs-number">384</span> <span class="hljs-built_in">bytes</span> | <span class="hljs-number">384.00</span> <span class="hljs-type">KiB</span>/s, <span class="hljs-keyword">done</span>.<br><span class="hljs-type">Total</span> <span class="hljs-number">4</span> (delta <span class="hljs-number">1</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>), pack-reused <span class="hljs-number">0</span> (from <span class="hljs-number">0</span>)<br>remote: <span class="hljs-type">Resolving</span> deltas: <span class="hljs-number">100</span>% (<span class="hljs-number">1</span>/<span class="hljs-number">1</span>), <span class="hljs-keyword">done</span>.<br><span class="hljs-type">To</span> github.com:zy674517173/<span class="hljs-type">MyWebServer_origin</span>.git<br>   af59730..<span class="hljs-number">5</span>aa9a4d  main -&gt; main<br>branch <span class="hljs-symbol">&#x27;main&#x27;</span> set up <span class="hljs-keyword">to</span> track <span class="hljs-symbol">&#x27;MyWebServer_origin</span>/main&#x27;.<br></code></pre></td></tr></table></figure><p><strong>报错</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">error: failed <span class="hljs-built_in">to</span> push some refs <span class="hljs-built_in">to</span> <span class="hljs-string">&#x27;github.com:zy674517173/MyWebServer_origin.git&#x27;</span><br>hint: Updates were rejected because <span class="hljs-keyword">the</span> remote <span class="hljs-keyword">contains</span> work that you <span class="hljs-built_in">do</span> <span class="hljs-keyword">not</span><br>hint: have locally. This is usually caused <span class="hljs-keyword">by</span> another repository pushing <span class="hljs-built_in">to</span><br>hint: <span class="hljs-keyword">the</span> same ref. If you want <span class="hljs-built_in">to</span> integrate <span class="hljs-keyword">the</span> remote changes, use<br>hint: <span class="hljs-string">&#x27;git pull&#x27;</span> <span class="hljs-keyword">before</span> pushing again.<br>hint: See <span class="hljs-keyword">the</span> <span class="hljs-string">&#x27;Note about fast-forwards&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;git push --help&#x27;</span> <span class="hljs-keyword">for</span> details.<br><br>解决方案<br>将仓库里的 README.md 文件删除，然后执行命令<br>$ git pull MyWebServer_origin main <span class="hljs-comment">--allow-unrelated-histories   // 从远端仓库拉取，同步本地</span><br></code></pre></td></tr></table></figure><h4 id="4）后续"><a href="#4）后续" class="headerlink" title="4）后续"></a>4）后续</h4><p>从现在开始，本地做了提交，就可以通过命令</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git <span class="hljs-built_in">push</span> MyWebServer_origin main<br></code></pre></td></tr></table></figure><p>把本地的 <strong>main</strong> 分支的最新修改推送至 GitHub 。</p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>关联一个远程库时必须给远程库指定一个名字，<code>origin</code> 是默认习惯命名；</p><p>关联后，使用命令 <strong>git push -u origin master</strong> 第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令 <strong>git push origin master</strong> 推送最新修改；</p><h4 id="5）删除远程库"><a href="#5）删除远程库" class="headerlink" title="5）删除远程库"></a>5）删除远程库</h4><h5 id="查看远程库信息"><a href="#查看远程库信息" class="headerlink" title="查看远程库信息"></a>查看远程库信息</h5><p>如果添加的时候地址写错了，或者就是想删除远程库，可以用 <strong>git remote rm [name]</strong> 命令。使用前，建议先用 <strong>git remote -v</strong> 查看远程库的信息：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">$ git remote -v<br>MyWebServer_origin      git<span class="hljs-keyword">@github</span>.<span class="hljs-attribute">com</span>:zy674517173/MyWebServer_origin.git (fetch)<br>MyWebServer_origin      git<span class="hljs-keyword">@github</span>.<span class="hljs-attribute">com</span>:zy674517173/MyWebServer_origin.git (push)<br></code></pre></td></tr></table></figure><p>然后根据名字删除，比如</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> git remote <span class="hljs-built_in">rm</span> MyWebServer_origin<br></code></pre></td></tr></table></figure><h2 id="VsCode内使用Git版本控制"><a href="#VsCode内使用Git版本控制" class="headerlink" title="VsCode内使用Git版本控制"></a>VsCode内使用Git版本控制</h2><p>在VsCode中打开本地仓库，然后点击版本控制，如果提示 <strong>未找到Git。请安装Git，或在git.path设置中配置</strong></p><p>配置过程：设置 —&gt; 在搜索框输入 <code>git.path</code> —&gt; settings.json 中编辑</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// win系统</span><br><span class="hljs-string">&quot;git.path&quot;</span>: <span class="hljs-string">&quot;E:<span class="hljs-subst">\\</span>Program Files<span class="hljs-subst">\\</span>Git<span class="hljs-subst">\\</span>bin<span class="hljs-subst">\\</span>git.exe&quot;</span><br><br><span class="hljs-comment">// linux系统</span><br><span class="hljs-string">&quot;git.path&quot;</span>: <span class="hljs-string">&quot;/Program Files/Git/bin/git.exe&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>General</title>
    <link href="/2024/05/31/General/"/>
    <url>/2024/05/31/General/</url>
    
    <content type="html"><![CDATA[<h1 id="总则"><a href="#总则" class="headerlink" title="总则"></a>总则</h1><p>hexo官方网站：[<a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a>]</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/05/31/hello-world/"/>
    <url>/2024/05/31/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署到远端网址"><a href="#部署到远端网址" class="headerlink" title="部署到远端网址"></a>部署到远端网址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><h3 id="Hexo三连"><a href="#Hexo三连" class="headerlink" title="Hexo三连"></a>Hexo三连</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo c &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="Hexo遇到的问题"><a href="#Hexo遇到的问题" class="headerlink" title="Hexo遇到的问题"></a>Hexo遇到的问题</h2><h3 id="部署到GitHub后不能显示主题，只有文字"><a href="#部署到GitHub后不能显示主题，只有文字" class="headerlink" title="部署到GitHub后不能显示主题，只有文字"></a>部署到GitHub后不能显示主题，只有文字</h3><p><strong>原因：</strong> </p><p>1、GitHub 上的博客搭建到了仓库里，也就是博客跟地址是<a href="https://xxx.github.io/">https://XXX.github.io/</a><repository_name>上，而不是根目录<a href="https://xxx.github.io/%E4%B8%AD">https://XXX.github.io/中</a></p><p>2.由于主题中的各种图片、js脚本都是默认根路径的</p><p><strong>如何修改：</strong> 将Hexo的 <code>config.yml</code> 中的 <code>url</code> 改为根目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 原来是 url: https://zy674517173.github.io/archive<br>url: https://zy674517173.github.io<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
